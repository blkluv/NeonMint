---
import Social from "../ui/Social.astro";
import { getCollection } from "astro:content";

interface MenuItem {
  name: string;
  path: string;
  dropdown?: Array<{ name: string; path: string }>;
}

interface Menu {
  [key: string]: MenuItem;
}

const [staticData] = await getCollection('staticData');

const { items = [] } = Astro.props as {
  items: Array<keyof Menu>;
};

const menu: Menu = {
  about: { name: "GðŸ”ºME", path: "https://app.jerseyclub.com" },
  blog: { 
    name: "BLðŸŸ G", 
    path: "/blog/",
    dropdown: [
      { name: "All Posts", path: "/blog/posts/" },
    ]
  },
  home: { name: "HðŸŸ ME", path: "/#home" },
  experience: { name: "BLðŸŸ CKSTORY", path: "/#experience" },
  projects: { name: "WðŸŸ RK", path: "/#projects" },
};

const baseClasses = {
  nav: "nav-links flex w-full justify-center gap-6 max-md:gap-3 max-md:py-6",
  link: "px-2 py-2 transition-all hover:text-mint-300 max-md:mx-auto max-md:w-full max-md:px-6 max-md:py-2",
  socialContainer: "flex items-center justify-center gap-5 md:hidden",
  dropdown: "relative group flex items-center",
  dropdownMenu: "absolute left-0 top-full hidden group-hover:block bg-white dark:bg-zinc-800 shadow-lg rounded-md py-2 min-w-[200px] z-50",
  dropdownItem: "block px-4 py-2 text-sm hover:bg-mint-100 dark:hover:bg-zinc-700 transition-colors"
} as const;
---

<script is:inline>
document.addEventListener("DOMContentLoaded", () => {
  const isHome = window.location.pathname === "/";
  
  const linkClasses = {
    active: ["text-mint-500", "dark:text-mint-400", "font-bold", "[text-shadow:1px_1px_11px_rgba(208,251,229,0.7)]"],
    inactive: ["dark:text-zinc-300", "text-blacktext"]
  };

  const toggleLinkClasses = (link: HTMLElement, isActive: boolean) => {
    if (isActive) {
      link.classList.add(...linkClasses.active);
      link.classList.remove(...linkClasses.inactive);
      link.setAttribute('aria-current', 'page');
    } else {
      link.classList.remove(...linkClasses.active);
      link.classList.add(...linkClasses.inactive);
      link.removeAttribute('aria-current');
    }
  };

  const updateActiveLink = () => {
    const currentPath = window.location.pathname;
    const currentHash = window.location.hash ? `#${window.location.hash.substring(1)}` : "";

    document.querySelectorAll("nav a").forEach((link) => {
      const path = link.getAttribute("data-path");
      toggleLinkClasses(link, path === currentPath || path === currentHash);
    });
  };

  const setupScrollSpy = () => {
    if (!isHome) return;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.getAttribute("id");
          if (sectionId) {
            document.querySelectorAll("nav a").forEach(link => {
              const path = link.getAttribute("data-path");
              toggleLinkClasses(link, path === `/#${sectionId}`);
            });
          }
        }
      });
    }, { root: null, rootMargin: "-50% 0px", threshold: 0 });

    document.querySelectorAll("section[id]").forEach(section => observer.observe(section));
  };

  updateActiveLink();
  setupScrollSpy();
  window.addEventListener("hashchange", updateActiveLink);
});
</script>

<nav class={baseClasses.nav} role="navigation" aria-label="Main Navigation">
  {items.map((key) => {
    const item = menu[key];
    if (!item) return null;

    const a11yLabel = item.name.replace(/[^\w\s]/g, '').trim();

    if (item.dropdown) {
      return (
        <div class={baseClasses.dropdown}>
          <a
            href={item.path}
            class={baseClasses.link}
            data-path={item.path}
            aria-label={a11yLabel}
            aria-current={item.path === Astro.url.pathname ? 'page' : undefined}
          >
            <span aria-hidden="true">{item.name}</span>
          </a>
          <div class={baseClasses.dropdownMenu}>
            {item.dropdown.map((dropdownItem) => (
              <a
                href={dropdownItem.path}
                class={baseClasses.dropdownItem}
                data-path={dropdownItem.path}
                aria-label={dropdownItem.name.replace(/[^\w\s]/g, '').trim()}
              >
                <span aria-hidden="true">{dropdownItem.name}</span>
              </a>
            ))}
          </div>
        </div>
      );
    }

    return (
      <a
        href={item.path}
        class={baseClasses.link}
        data-path={item.path}
        aria-label={a11yLabel}
        aria-current={item.path === Astro.url.pathname ? 'page' : undefined}
      >
        <span aria-hidden="true">{item.name}</span>
      </a>
    );
  })}
  
  <div class={baseClasses.socialContainer} role="group" aria-label="Social Media Links">
    <Social link={staticData.data.linkedin} iconName={staticData.data.linkedinIconName} />
  </div>
</nav>
