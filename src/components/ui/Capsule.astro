---
import { getLanguage } from "../../utils/languages";

interface Props {
  lang: string;
  size?: "xs" | "md";
  linkEnabled?: boolean;
}

const { size = "md", lang, linkEnabled = true } = Astro.props as Props;

const baseClasses = {
  container: [
    "flex items-center w-fit",
    "px-3 py-1.5 gap-2",
    "text-sm font-medium",
    "bg-white shadow-sm rounded-full",
    "border border-gray-100",
    "transition-all duration-200 ease-in-out hover:bg-gray-800 hover:text-white",
    "max-sm:px-2 max-sm:py-1 max-sm:text-xs",
  ].join(" "),
};

const sizeClasses = {
  xs: "text-xs",
  md: "text-sm",
};

// Extract emoji and clean name
const emoji = lang.match(/\p{Emoji}/u)?.[0] || '';
const cleanName = lang.replace(emoji, '').trim();

const getContainerClasses = () => {
  return `${baseClasses.container} ${sizeClasses[size]}`;
};
---

{
  linkEnabled ? (
    <a
      class="cursor-pointer"
      href={`/services/${cleanName.toLowerCase().replace(/\s+/g, '-')}`}
      aria-label={`View ${cleanName} service`}
    >
      <span class={getContainerClasses()}>
        {emoji && (
          <span class="mr-1" role="img" aria-hidden="true">
            {emoji}
          </span>
        )}
        {cleanName}
      </span>
    </a>
  ) : (
    <span class={`${getContainerClasses()} cursor-default`}>
      {emoji && (
        <span class="mr-1" role="img" aria-hidden="true">
          {emoji}
        </span>
      )}
      {cleanName}
    </span>
  )
}